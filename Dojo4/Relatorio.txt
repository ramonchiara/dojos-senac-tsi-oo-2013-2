* **Data:** 04/11/2013
* **Horário:** 21:15
* **Linguagem:** C#
* **Problema:** O problema proposto foi o exercício da [Lista 7](https://raw.github.com/ramonchiara/dojos-senac-tsi-oo-2013-2/master/Dojo4/Lab7.pdf) que se encontra no site do [Prof. Ramon](http://ramon.pro.br/material/oo/Lab7.pdf).
* **Formato:** Randori
* **Participantes**: *Caio de Arruda Campos Coan*, *David Anderson da Silva Rocha*, Denis Martos, Edson Antônio de Almeida Júnior, *Emerson Gaudino Garcia*, *Érika Lima Vila Nova*, Francisco Gregório da Silva Júnior, Guilherme Cardoso da Silva, *Isaac Eliape Ferreira de Brito*, *Osmar de Souza Queiroz*, *Patrícia de Lima Santos*, *Rafael Godinho dos Santos Lima*, *Ramon Chiara*, William Silva de Souza.
* **Código**: [GitHub](https://github.com/ramonchiara/dojos-senac-tsi-oo-2013-2)

Como de costume, o professor começou criando os testes. Nesse caso, testes foram criados para cada um dos tipos de programador (jr, pl, sr).
Nesse ponto, foi feito um _refactoring_ de forma a juntar o que era comum aos programadores em uma classe base que foi chamada de <code>Programador</code>.
A questão de classe abstrata (matéria da noite) surgiu quando foi preciso desenvolver o método de cálculo do salário nessa nova classe.

Logo após, o professor chamou a atenção para o fato de que o método que calcula salário é igual em cada sub-classe, mudando apenas o valor da hora.
A idéia era comentar sobre o _pattern_ chamado _Template_, mas os alunos sugeriram a passagem do valor da hora pelo construtor.
Isso acabou com a necessidade de se ter um método abstrato, apesar da classe permanencer abstrata.

Também foi visto que o método <code>GetNome</code>, que é concreto, podia ser movido para a classe abstrata.
Conforme explicado na aula de teoria, isso é perfeitamente possível.

No momento de criar a classe <code>Gerente</code>, foi percebida a necessidade de chamar a classe <code>Programador</code> de <code>Funcionário</code>, o que foi feito usando-se as ferramentas de _refactoring_ do Visual Studio .Net.
Após isso, foi a vez de desenvolver a classe <code>Vendedor</code> e, com isso, a necessidade de dividir a classe <code>Funcionario</code>, já que começou a haver discrepância no comportamento das classes (vendedor não trabalha por hora).
Foi discutida a proposta de herdar a classe <code>FuncionarioHorista</code> de <code>Funcionario</code>.
Assim, foi visto que, conforme vai havendo necessidade, toda uma hierarquia de classes pode ser criada.
Provavelmente a hierarquia de classes ficaria assim:

![Possível hierarquia de classes.](https://raw.github.com/ramonchiara/dojos-senac-tsi-oo-2013-2/master/Dojo4/Hierarquia de Classes.jpg)

O tempo estava se esgotando e o professor propôs um último teste para o que seria a classe que calcula a folha de pagamento para vários funcionários.
Perdemos um pouco de tempo tentando fazer o teste passar porque foi difícil detectar que o método <code>CalculaSalario</code> não estava como _virtual_ na classe base.
Talvez isso teria sido evitado fazendo os testes desde o início de forma polimórfica (variável base, objeto da sub-classe).

Veja algumas fotos:

![Tentativa de panorâmica.](https://raw.github.com/ramonchiara/dojos-senac-tsi-oo-2013-2/master/Dojo4/Fotos/2013-11-04 21.22.04.jpg)

![Pessoal concentrado...](https://raw.github.com/ramonchiara/dojos-senac-tsi-oo-2013-2/master/Dojo4/Fotos/2013-11-04 21.38.14.jpg)

![Retrospectiva.](https://raw.github.com/ramonchiara/dojos-senac-tsi-oo-2013-2/master/Dojo4/Fotos/2013-11-04 22.40.48.jpg)

![O que foi bom?](https://raw.github.com/ramonchiara/dojos-senac-tsi-oo-2013-2/master/Dojo4/Fotos/2013-11-04 22.40.55.jpg)

![O que podia melhorar?](https://raw.github.com/ramonchiara/dojos-senac-tsi-oo-2013-2/master/Dojo4/Fotos/2013-11-04 22.41.02.jpg)


**Retrospectiva:**

* _O que deu certo? / O que aprendemos?_
 * Conseguimos melhorar a lógica x3 / Trabalho em duplas / Exemplos do teste.
 * Aplicar os conhecimentos passados na aula e nas aulas passadas x5.

* _O que pode melhorar? / O que dificultou o aprendizado?_
 * Precisamos praticar mais exercícios x2.
 * Aumentar o tempo mais 5 min.
 * Não pode dormir no Dojo!
